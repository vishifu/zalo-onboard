/**
 * Autogenerated by Thrift Compiler (0.22.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.sample.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.22.0)", date = "2025-08-01")
public class SongStruct implements org.apache.thrift.TBase<SongStruct, SongStruct._Fields>, java.io.Serializable, Cloneable, Comparable<SongStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SongStruct");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RATING_FIELD_DESC = new org.apache.thrift.protocol.TField("rating", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField AUTHOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("authorID", org.apache.thrift.protocol.TType.SET, (short)4);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PUBLISH_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("publishDate", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField INNER_SONGS_FIELD_DESC = new org.apache.thrift.protocol.TField("innerSongs", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SongStructStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SongStructTupleSchemeFactory();

  public int id; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
  public double rating; // required
  public @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> authorID; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer content; // required
  public @org.apache.thrift.annotation.Nullable DateStruct publishDate; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<SongStruct> innerSongs; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    RATING((short)3, "rating"),
    AUTHOR_ID((short)4, "authorID"),
    CONTENT((short)5, "content"),
    PUBLISH_DATE((short)6, "publishDate"),
    INNER_SONGS((short)7, "innerSongs");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // RATING
          return RATING;
        case 4: // AUTHOR_ID
          return AUTHOR_ID;
        case 5: // CONTENT
          return CONTENT;
        case 6: // PUBLISH_DATE
          return PUBLISH_DATE;
        case 7: // INNER_SONGS
          return INNER_SONGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __RATING_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RATING, new org.apache.thrift.meta_data.FieldMetaData("rating", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AUTHOR_ID, new org.apache.thrift.meta_data.FieldMetaData("authorID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.PUBLISH_DATE, new org.apache.thrift.meta_data.FieldMetaData("publishDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DateStruct.class)));
    tmpMap.put(_Fields.INNER_SONGS, new org.apache.thrift.meta_data.FieldMetaData("innerSongs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SongStruct.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SongStruct.class, metaDataMap);
  }

  public SongStruct() {
  }

  public SongStruct(
    int id,
    java.lang.String name,
    double rating,
    java.util.Set<java.lang.Integer> authorID,
    java.nio.ByteBuffer content,
    DateStruct publishDate,
    java.util.List<SongStruct> innerSongs)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.rating = rating;
    setRatingIsSet(true);
    this.authorID = authorID;
    this.content = org.apache.thrift.TBaseHelper.copyBinary(content);
    this.publishDate = publishDate;
    this.innerSongs = innerSongs;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SongStruct(SongStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.rating = other.rating;
    if (other.isSetAuthorID()) {
      java.util.Set<java.lang.Integer> __this__authorID = new java.util.HashSet<java.lang.Integer>(other.authorID);
      this.authorID = __this__authorID;
    }
    if (other.isSetContent()) {
      this.content = org.apache.thrift.TBaseHelper.copyBinary(other.content);
    }
    if (other.isSetPublishDate()) {
      this.publishDate = new DateStruct(other.publishDate);
    }
    if (other.isSetInnerSongs()) {
      java.util.List<SongStruct> __this__innerSongs = new java.util.ArrayList<SongStruct>(other.innerSongs.size());
      for (SongStruct other_element : other.innerSongs) {
        __this__innerSongs.add(new SongStruct(other_element));
      }
      this.innerSongs = __this__innerSongs;
    }
  }

  @Override
  public SongStruct deepCopy() {
    return new SongStruct(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    setRatingIsSet(false);
    this.rating = 0.0;
    this.authorID = null;
    this.content = null;
    this.publishDate = null;
    this.innerSongs = null;
  }

  public int getId() {
    return this.id;
  }

  public SongStruct setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public SongStruct setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public double getRating() {
    return this.rating;
  }

  public SongStruct setRating(double rating) {
    this.rating = rating;
    setRatingIsSet(true);
    return this;
  }

  public void unsetRating() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RATING_ISSET_ID);
  }

  /** Returns true if field rating is set (has been assigned a value) and false otherwise */
  public boolean isSetRating() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RATING_ISSET_ID);
  }

  public void setRatingIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RATING_ISSET_ID, value);
  }

  public int getAuthorIDSize() {
    return (this.authorID == null) ? 0 : this.authorID.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getAuthorIDIterator() {
    return (this.authorID == null) ? null : this.authorID.iterator();
  }

  public void addToAuthorID(int elem) {
    if (this.authorID == null) {
      this.authorID = new java.util.HashSet<java.lang.Integer>();
    }
    this.authorID.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<java.lang.Integer> getAuthorID() {
    return this.authorID;
  }

  public SongStruct setAuthorID(@org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> authorID) {
    this.authorID = authorID;
    return this;
  }

  public void unsetAuthorID() {
    this.authorID = null;
  }

  /** Returns true if field authorID is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorID() {
    return this.authorID != null;
  }

  public void setAuthorIDIsSet(boolean value) {
    if (!value) {
      this.authorID = null;
    }
  }

  public byte[] getContent() {
    setContent(org.apache.thrift.TBaseHelper.rightSize(content));
    return content == null ? null : content.array();
  }

  public java.nio.ByteBuffer bufferForContent() {
    return org.apache.thrift.TBaseHelper.copyBinary(content);
  }

  public SongStruct setContent(byte[] content) {
    this.content = content == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(content.clone());
    return this;
  }

  public SongStruct setContent(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer content) {
    this.content = org.apache.thrift.TBaseHelper.copyBinary(content);
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public DateStruct getPublishDate() {
    return this.publishDate;
  }

  public SongStruct setPublishDate(@org.apache.thrift.annotation.Nullable DateStruct publishDate) {
    this.publishDate = publishDate;
    return this;
  }

  public void unsetPublishDate() {
    this.publishDate = null;
  }

  /** Returns true if field publishDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPublishDate() {
    return this.publishDate != null;
  }

  public void setPublishDateIsSet(boolean value) {
    if (!value) {
      this.publishDate = null;
    }
  }

  public int getInnerSongsSize() {
    return (this.innerSongs == null) ? 0 : this.innerSongs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<SongStruct> getInnerSongsIterator() {
    return (this.innerSongs == null) ? null : this.innerSongs.iterator();
  }

  public void addToInnerSongs(SongStruct elem) {
    if (this.innerSongs == null) {
      this.innerSongs = new java.util.ArrayList<SongStruct>();
    }
    this.innerSongs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<SongStruct> getInnerSongs() {
    return this.innerSongs;
  }

  public SongStruct setInnerSongs(@org.apache.thrift.annotation.Nullable java.util.List<SongStruct> innerSongs) {
    this.innerSongs = innerSongs;
    return this;
  }

  public void unsetInnerSongs() {
    this.innerSongs = null;
  }

  /** Returns true if field innerSongs is set (has been assigned a value) and false otherwise */
  public boolean isSetInnerSongs() {
    return this.innerSongs != null;
  }

  public void setInnerSongsIsSet(boolean value) {
    if (!value) {
      this.innerSongs = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case RATING:
      if (value == null) {
        unsetRating();
      } else {
        setRating((java.lang.Double)value);
      }
      break;

    case AUTHOR_ID:
      if (value == null) {
        unsetAuthorID();
      } else {
        setAuthorID((java.util.Set<java.lang.Integer>)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        if (value instanceof byte[]) {
          setContent((byte[])value);
        } else {
          setContent((java.nio.ByteBuffer)value);
        }
      }
      break;

    case PUBLISH_DATE:
      if (value == null) {
        unsetPublishDate();
      } else {
        setPublishDate((DateStruct)value);
      }
      break;

    case INNER_SONGS:
      if (value == null) {
        unsetInnerSongs();
      } else {
        setInnerSongs((java.util.List<SongStruct>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case RATING:
      return getRating();

    case AUTHOR_ID:
      return getAuthorID();

    case CONTENT:
      return getContent();

    case PUBLISH_DATE:
      return getPublishDate();

    case INNER_SONGS:
      return getInnerSongs();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case RATING:
      return isSetRating();
    case AUTHOR_ID:
      return isSetAuthorID();
    case CONTENT:
      return isSetContent();
    case PUBLISH_DATE:
      return isSetPublishDate();
    case INNER_SONGS:
      return isSetInnerSongs();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof SongStruct)
      return this.equals((SongStruct)that);
    return false;
  }

  public boolean equals(SongStruct that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_rating = true;
    boolean that_present_rating = true;
    if (this_present_rating || that_present_rating) {
      if (!(this_present_rating && that_present_rating))
        return false;
      if (this.rating != that.rating)
        return false;
    }

    boolean this_present_authorID = true && this.isSetAuthorID();
    boolean that_present_authorID = true && that.isSetAuthorID();
    if (this_present_authorID || that_present_authorID) {
      if (!(this_present_authorID && that_present_authorID))
        return false;
      if (!this.authorID.equals(that.authorID))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_publishDate = true && this.isSetPublishDate();
    boolean that_present_publishDate = true && that.isSetPublishDate();
    if (this_present_publishDate || that_present_publishDate) {
      if (!(this_present_publishDate && that_present_publishDate))
        return false;
      if (!this.publishDate.equals(that.publishDate))
        return false;
    }

    boolean this_present_innerSongs = true && this.isSetInnerSongs();
    boolean that_present_innerSongs = true && that.isSetInnerSongs();
    if (this_present_innerSongs || that_present_innerSongs) {
      if (!(this_present_innerSongs && that_present_innerSongs))
        return false;
      if (!this.innerSongs.equals(that.innerSongs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rating);

    hashCode = hashCode * 8191 + ((isSetAuthorID()) ? 131071 : 524287);
    if (isSetAuthorID())
      hashCode = hashCode * 8191 + authorID.hashCode();

    hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
    if (isSetContent())
      hashCode = hashCode * 8191 + content.hashCode();

    hashCode = hashCode * 8191 + ((isSetPublishDate()) ? 131071 : 524287);
    if (isSetPublishDate())
      hashCode = hashCode * 8191 + publishDate.hashCode();

    hashCode = hashCode * 8191 + ((isSetInnerSongs()) ? 131071 : 524287);
    if (isSetInnerSongs())
      hashCode = hashCode * 8191 + innerSongs.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SongStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRating(), other.isSetRating());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRating()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rating, other.rating);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAuthorID(), other.isSetAuthorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorID, other.authorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetContent(), other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPublishDate(), other.isSetPublishDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublishDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publishDate, other.publishDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInnerSongs(), other.isSetInnerSongs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInnerSongs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.innerSongs, other.innerSongs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SongStruct(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rating:");
    sb.append(this.rating);
    first = false;
    if (!first) sb.append(", ");
    sb.append("authorID:");
    if (this.authorID == null) {
      sb.append("null");
    } else {
      sb.append(this.authorID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.content, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("publishDate:");
    if (this.publishDate == null) {
      sb.append("null");
    } else {
      sb.append(this.publishDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("innerSongs:");
    if (this.innerSongs == null) {
      sb.append("null");
    } else {
      sb.append(this.innerSongs);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (publishDate != null) {
      publishDate.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SongStructStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SongStructStandardScheme getScheme() {
      return new SongStructStandardScheme();
    }
  }

  private static class SongStructStandardScheme extends org.apache.thrift.scheme.StandardScheme<SongStruct> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, SongStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RATING
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rating = iprot.readDouble();
              struct.setRatingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AUTHOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.authorID = new java.util.HashSet<java.lang.Integer>(2*_set0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _set0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.authorID.add(_elem1);
                }
                iprot.readSetEnd();
              }
              struct.setAuthorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readBinary();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PUBLISH_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.publishDate = new DateStruct();
              struct.publishDate.read(iprot);
              struct.setPublishDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INNER_SONGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.innerSongs = new java.util.ArrayList<SongStruct>(_list3.size);
                @org.apache.thrift.annotation.Nullable SongStruct _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new SongStruct();
                  _elem4.read(iprot);
                  struct.innerSongs.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setInnerSongsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, SongStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RATING_FIELD_DESC);
      oprot.writeDouble(struct.rating);
      oprot.writeFieldEnd();
      if (struct.authorID != null) {
        oprot.writeFieldBegin(AUTHOR_ID_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.authorID.size()));
          for (int _iter6 : struct.authorID)
          {
            oprot.writeI32(_iter6);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeBinary(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.publishDate != null) {
        oprot.writeFieldBegin(PUBLISH_DATE_FIELD_DESC);
        struct.publishDate.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.innerSongs != null) {
        oprot.writeFieldBegin(INNER_SONGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.innerSongs.size()));
          for (SongStruct _iter7 : struct.innerSongs)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SongStructTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SongStructTupleScheme getScheme() {
      return new SongStructTupleScheme();
    }
  }

  private static class SongStructTupleScheme extends org.apache.thrift.scheme.TupleScheme<SongStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SongStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetRating()) {
        optionals.set(2);
      }
      if (struct.isSetAuthorID()) {
        optionals.set(3);
      }
      if (struct.isSetContent()) {
        optionals.set(4);
      }
      if (struct.isSetPublishDate()) {
        optionals.set(5);
      }
      if (struct.isSetInnerSongs()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetRating()) {
        oprot.writeDouble(struct.rating);
      }
      if (struct.isSetAuthorID()) {
        {
          oprot.writeI32(struct.authorID.size());
          for (int _iter8 : struct.authorID)
          {
            oprot.writeI32(_iter8);
          }
        }
      }
      if (struct.isSetContent()) {
        oprot.writeBinary(struct.content);
      }
      if (struct.isSetPublishDate()) {
        struct.publishDate.write(oprot);
      }
      if (struct.isSetInnerSongs()) {
        {
          oprot.writeI32(struct.innerSongs.size());
          for (SongStruct _iter9 : struct.innerSongs)
          {
            _iter9.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SongStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.rating = iprot.readDouble();
        struct.setRatingIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TSet _set10 = iprot.readSetBegin(org.apache.thrift.protocol.TType.I32);
          struct.authorID = new java.util.HashSet<java.lang.Integer>(2*_set10.size);
          int _elem11;
          for (int _i12 = 0; _i12 < _set10.size; ++_i12)
          {
            _elem11 = iprot.readI32();
            struct.authorID.add(_elem11);
          }
        }
        struct.setAuthorIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.content = iprot.readBinary();
        struct.setContentIsSet(true);
      }
      if (incoming.get(5)) {
        struct.publishDate = new DateStruct();
        struct.publishDate.read(iprot);
        struct.setPublishDateIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list13 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.innerSongs = new java.util.ArrayList<SongStruct>(_list13.size);
          @org.apache.thrift.annotation.Nullable SongStruct _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new SongStruct();
            _elem14.read(iprot);
            struct.innerSongs.add(_elem14);
          }
        }
        struct.setInnerSongsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

